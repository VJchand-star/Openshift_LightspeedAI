# Env vars for use w/ envsubst:
# $OLS_IMAGE - the pullspec for the OLS container image to deploy
# $CP_OFFLINE_TOKEN - the "offline" token to console.stage.redhat.com

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: ols
  name: ols
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: ols
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: ols
        deployment: ols
    spec:
      volumes:
        - name: olsconfig
          configMap:
            name: olsconfig
        - name: llmcreds
          secret:
            secretName: llmcreds
        - name: tls-certs
          secret:
            secretName: ols-certs
        - name: ols-user-data
          emptyDir: {}
      containers:
      - image: "$OLS_IMAGE"
        imagePullPolicy: Always
        name: ols
        env:
          - name: OLS_CONFIG_FILE
            value: /app-root/config/olsconfig.yaml
        ports:
        - containerPort: 8443
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
          - name: olsconfig
            mountPath: /app-root/config
          - name: llmcreds
            mountPath: /app-root/config/llmcreds
          - name: tls-certs
            mountPath: /app-root/certs
          - name: ols-user-data
            mountPath: /app-root/ols-user-data
      - image: "$OLS_IMAGE"
        name: ols-sidecar-user-data-collector
        imagePullPolicy: Always
        env:
          - name: OLS_USER_DATA_PATH
            value: /app-root/ols-user-data
          - name: OLS_USER_DATA_COLLECTION_INTERVAL
            value: "10"
          - name: RUN_WITHOUT_INITIAL_WAIT
            value: "true"
          - name: INGRESS_ENV
            value: "stage"
          - name: CP_OFFLINE_TOKEN
            value: "$CP_OFFLINE_TOKEN"
        command: ["python3.11", "/app-root/ols/user_data_collection/data_collector.py"]
        volumeMounts:
          - name: ols-user-data
            mountPath: /app-root/ols-user-data
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: ols
  annotations:
    service.beta.openshift.io/serving-cert-secret-name: ols-certs
  name: ols
spec:
  internalTrafficPolicy: Cluster
  ipFamilies:
  - IPv4
  ipFamilyPolicy: SingleStack
  ports:
  - name: 8443-tcp
    port: 8443
    protocol: TCP
    targetPort: 8443
  selector:
    app: ols
    deployment: ols
  sessionAffinity: None
  type: ClusterIP

---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
 labels:
   app: ols
 name: ols
spec:
 port:
   targetPort: 8443-tcp
 tls:
   insecureEdgeTerminationPolicy: Redirect
   termination: reencrypt
 to:
   kind: Service
   name: ols
   weight: 100
 wildcardPolicy: None

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: ols-sar-check
  labels:
    app: ols
rules:
- apiGroups: ["authentication.k8s.io"]
  resources:
  - tokenreviews
  verbs: ["create"]
- apiGroups: ["authorization.k8s.io"]
  resources:
  - subjectaccessreviews
  verbs: ["create"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: ols-sar-check
  labels:
    app: ols
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ols-sar-check
subjects:
- kind: ServiceAccount
  name: default
  namespace: openshift-lightspeed

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: ols-user
  labels:
    app: ols
rules:
- nonResourceURLs:
    - "/ols-access"
  verbs:
    - "get"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: ols-metrics-user
  labels:
    app: ols
rules:
- nonResourceURLs:
    - "/ols-metrics-access"
  verbs:
    - "get"
